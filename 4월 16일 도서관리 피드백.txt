[전세영]
- 매직넘버끼리 모아 따로 클래스로 만듦
- 값을 입력받을 때 몇 자를 초과해 입력하면 아예 입력 자체가 안 되도록
- 반복적으로 출력되는 경우 코드 길이 줄일 수 있도록
- do while 되도록이면 쓰지 말 것(가독성 해침)
- 데이터 static으로 전달하지 말 것
- 메소드 네이밍에 신경쓸 것

[박지호]
- 긴 출력의 경우는 배열 안에 넣어서 for문으로 돌리기!
- Cconsole.Write가 자주 겹치면 클래스로 따로 빼놓기
- 데이터 공유는 생성자 이용해서 해볼 것!
- 싱글톤 패턴과 VO는 목적 자체가 다르므로, 코딩 전에 패턴, 속성 들을 먼저 생각해보고 할 것
- 리턴할 때 알기 어려운 숫자 사용하지 말고 define이나 매직넘버 사용할 것
- 네이밍에서 오타도 주의할 것
- 모듈화에 신경쓸 것
- goTo 쓰지 말 것(아예!)

[이다인]
- 객체 생성해서 쓰는 것이 자유로운데, 어려웠던 점? 잘했음!
- 입력값에 대한 예외처리 굿이지만, 프로그램적으로의 예외처리에 조금 더 신경쓰면 좋겠음
- 클래스와 메소드 설계를 알아보기 쉽게 잘해서 아주 칭찬해~!
- 검색 메소드의 코드가 많이 중복되어있음(BookManagement class에서 검색할 때)
  -> 메소드로 빼서 코드를 줄이면 좋겠음
- 정규식 사용 칭찬해~ 정규식에서 숫자 등 여러가지가 있는데, 정규식에서도 중복을 줄일 것!
- 사용자의 입장에서 검토하라고 했었는데, 그런 부분에서 아쉬웠음('시'만 입력하시오)
- 상수 네이밍 더 잘 했으면!
- 코드내용을 잘 숙지해서 더 편리하게 사용할 수 있도록(뒤로가기-로그인-뒤로가기-로그인 절차)
- 클래스가 깔끔해져서 좋았고, 예외처리 못 한 부분도 많이 줄었음
- 도서 등록에서 스페이스만 눌러도 됐는데, 그런 부분에서 프로그램 테스트 많이 해볼 것
- Console.Write가 계속 중복되는 경우 메소드로 따로 빼놓기
- 복붙의 흔적이 많이 보임! -> 메소드화가 가능함
- VO객체(java에서) toString이라는 메소드(객체)에 대해 찾아볼 것
  객체가 잘 전달되고 있는지 확인하기 위해 toString 객체 사용해볼 것

[주영준]
- 숫자를 일일이 전달하는 것 보다 변수명을 만들어서 주는 것이 좋을 듯
  -> 데이터 변경이나 손실의 위험 때문
- 객체를 불필요하게 생성할 위험을 줄일 것
- 스위치문 간단하게 할 것!
- 단순 프린트같은 클래스들은 static 사용해도 괜찮음

[임석호]
- 정규식 블로그 : 우아한 형제들
- 싱글톤을 사용하는 이유가 어느 클래스에서든 쓰기 때문이면 안 됨
  -> 개발자들이 싱글톤과 static을 쓰지 않는 이유! 어디에서든 쓸 수 있으니까
  -> 로직이 없고 변하지 않으며 언제든지 쓸 수 있을 경우에만 싱글톤 패턴을 사용할 것
- 대소문자 구별하지 않고 검사하는 게 있으니 한 번 알아볼 것, 또는 모두 upper 처리
 
[최재성]
- VO클래스 내에서 기능들을 넣지 말 것
- 스위치는 모듈화
- 도움말 좋았음

[허진규]
- 스위치문 사용할 때 위에서 객체를 생성하고 밑에서는 깔끔하게 해서 좋았음
- 매직넘버 사용 그렇게 할 것
- 매직넘버 규칙 지켜서 사용할 것(무조건 대문자에 띄어쓰기는 언더바)

[총평]
- 피드백에 맞는 방법인지 생각하고 코딩할 것















